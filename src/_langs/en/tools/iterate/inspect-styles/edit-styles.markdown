---
rss: false
layout: article
title: "Edit Styles"
seotitle: "Edit Styles in the Chrome DevTools Styles pane."
description: "CSS defines the presentation layer of your page. View and modify any CSS declaration that affects an element on the current page using the Chrome DevTools Styles pane."
introduction: "CSS defines the presentation layer of your page. View and modify any CSS declaration that affects an element on the current page using the Chrome DevTools Styles pane."
article:
  written_on: 2015-04-14
  updated_on: 2015-04-14
  order: 2
authors:
  - megginkearney
priority: 0
collection: inspect-styles
key-takeaways:
  edit-styles:
    - The styles pane lets you change your CSS in as many ways as possible, locally, including editing existing styles, adding new styles, adding rules for styles.
    - If you want styles to persist (so they don't go away on a reload), you need to persist them to your development workspace.
remember:
  navigation:
    - Use the shortcut <strong>Ctrl + Click</strong>(or <strong>Cmd + Click</strong> on Mac) on CSS properties or property values from the styles pane to navigate to their position in the source code within the Sources panel.
  enable-style:
    - To enable or disable a style declaration, check or uncheck the checkbox next to it.
  new-rule:
    - When you create a new rule, the new rule doesn't belong to an existing stylesheet. DevTools adds it to a special inspector stylesheet. The inspector stylesheet can be edited in the Sources panel, like other files.
  external-editor:
    - Changes made in an external editor are not detected by DevTools until the Sources tab containing the associated source file regains focus. Also, manual editing of a CSS file generated by the Sass/LESS/other compiler will break the source map association until the page is reloaded.
---
{% wrap content %}

If you haven't already, familiarize yourself on the [basics of inspecting and tweaking your pages](https://web-central.appspot.com/web/tools/iterate/inspect-styles/basics). This guide dives deeper into editing and creating styles, including working with css preprocessor source files.

{% include modules/toc.liquid %}

{% include modules/takeaway.liquid list=page.key-takeaways.edit-styles %}

## Edit and create styles

You can add or edit styles within the **Styles pane** in the Elements panel in the following ways:

* Edit an existing property name or value.
* Add a new property declaration.
* Add a new CSS rule.

### Edit an existing property name or value

Click on a CSS property name or property value to edit; press Tab or Enter to change the name or value (see also [How to live-edit a style](https://web-central.appspot.com/web/tools/iterate/inspect-styles/basics?hl=en#how-to-live-edit-a-style)).

When editing a numeric CSS property value, increment and decrement numeric CSS property values using the following shortcuts:

* Press **Up** or **Down** to increment or decrement the value by 1 (or by .1 if the current value is between -1 and 1).
* Press **Alt + Up** or **Alt + Down** to increment or decrement the value by 0.1.
* Press **Shift + Up/Down** or **PageUp**/**PageDown** to increment or decrement the value by 10.
* Press **Shift + PageUp**/**PageDown** to increment or decrement the value by 100.

### Add a new property declaration

Click an empty space within an editable CSS rule to create a new style. Edit mode now applies to the CSS property field, where you can enter a new property.

To add a new property and view code hints in the CSS property field, follow these steps:

1. Begin typing into the CSS property field. Suggestions display in a drop down box.
2. Press **Up** or **Down** arrows to focus on a suggestion.
3. Accept a suggestion using **Tab**, Right arrow or **Enter**.

After you select a valid CSS property, bring up suggestions for applicable CSS values by moving focus to the CSS property value field. For example, the property `display` suggests values such as `block, flex, none,` and others.

Paste CSS into the Styles pane using **Ctrl + V** (or **Cmd + V** on Mac). Properties and their values are parsed and entered into the correct fields.

{% include modules/remember.liquid title="Remember" list=page.remember.enable-style %}

### Add a style rule

You may find it preferable to add styles along with a **new selector**.
Click **New Style Rule** within the styles pane header bar to generate a new CSS rule.

{% animation animations/new-style-rule.mp4 %}

{% include modules/remember.liquid title="Note" list=page.remember.new-rule %}

### How to add dynamic styles for page elements

You can provide dynamic styling for your UI elements using pseudo-class selectors such as `:hover`. However, these dynamic states can be hard to debug, so DevTools lets you manually set pseudo-classes on individual elements.

{% animation animations/pseudo-triggers.mp4 %}

Trigger any combination of the following four pseudo-classes:

<table class="table-2">
  <thead>
    <tr>
      <th>Pseudo-class</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td data-th="Value"><code>:active</code></td>
      <td data-th="Description">Applies to a link in the process of activation (for example, upon click).</td>
    </tr>
    <tr>
      <td data-th="Value"><code>:hover</code></td>
      <td data-th="Description">Applies to an element while a mouse cursor is over it.</td>
    </tr>
    <tr>
      <td data-th="Value"><code>:focus</code></td>
      <td data-th="Description">Applies to an element which gains focus (for example, through pressing Tab).</td>
    </tr>
    <tr>
      <td data-th="Value"><code>:visited</code></td>
      <td data-th="Description">Applies to a link previously visited in the browser.</td>
    </tr>
  </tbody>
</table>

To set an element's state:

1. Click **Toggle Element State**![attributes](imgs/attributes-icon.png){:.inline} next to **New Style Rule** ![plus](imgs/plus.png){:.inline} within the styles pane header.
2. Right-click a DOM node in the Elements panel and select **Force Element State**.

## Edit preprocessor source files

Many developers generate CSS style sheets using a CSS preprocessor, such as Sass, Less, or Stylus. Because the CSS files are generated, editing the CSS files directly is not as helpful.

For preprocessors that support CSS source maps, DevTools lets you live-edit your preprocessor source files in the Sources panel, and view the results without having to leave DevTools or refresh the page. 

When you inspect an element whose styles are provided by a generated CSS file, the Elements panel displays a link to the original source file, not the generated CSS file.

![Elements panel showing .scss stylesheet](imgs/sass-debugging.png)

To jump to the source file:

1. Click the link to open the (editable) source file in the Sources panel.
2. **Control+click** (or **Command+click**) on any CSS property name or value to open the source file and jump to the appropriate line.

![Sources panel showing .scss file](imgs/sass-sources.png)

When you save changes to a CSS preprocessor file in DevTools, the CSS preprocessor should re-generate the CSS files. Then DevTools reloads the newly-generated CSS file.

If you're using Workspaces, you'll need to make sure the generated CSS file is also mapped into the workspace. You can verify this by looking in Sources panel right-side tree, and seeing the CSS is from your local folder.

{% include modules/remember.liquid title="Remember" list=page.remember.external-editor %}

### Requirements

There are a few requirements to note when working with a CSS preprocessor:

* To use this workflow, your CSS preprocessor must support CSS source maps, specifically the Source Map v3 proposal. The CSS source maps must be built along with the CSS files, so DevTools can map each CSS property to the correct location in the original source file (for example, .scss file).
* For the DevTools to automatically reload styles when you change the source file, your preprocessor must be set up to regenerate CSS files whenever a source file changes. Otherwise, you must regenerate CSS files manually and reload the page to see your changes.
* You must be accessing your site or app from a web server (not a **file://** URL), and the server must serve the CSS files as well as the source maps (.css.map) and source files (.scss, etc.).
* If you are _not_ using the Workspaces feature, the web server must also supply the `Last-Modified` header. The Python `SimpleHTTPServer` module provides this header by default. You can start a web server to serve the contents of the current directory like this:

  `python -m SimpleHTTPServer`

### Enable CSS source maps

CSS source maps are enabled by default. You can choose to enable automatic reloading of generated CSS files. To enable CSS source maps and CSS reload:

1. Open DevTools Settings and click **General**.
2. Turn on **Enable CSS source maps** and **Auto-reload generated CSS**.

## Using Sass with CSS source maps

To live-edit Sass files in Chrome you need to have the [pre-release version of the Sass compiler](http://sass-lang.com/download.html), which is the only version that currently supports source map generation.

`gem install sass`

Once Sass is installed, start the Sass compiler to watch for changes to your Sass source files and create source map files for each generated CSS file, for example:

`sass --watch **--sourcemap** sass/styles.scss:styles.css`

### How CSS source maps work

For each CSS file it produces, the preprocessor generates a [source map](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/) file (.map file) in addition to the compiled CSS. The source map file is a JSON file that defines a mapping between each generated CSS declaration and the corresponding line of the source file. Each CSS file contains an annotation that specifies the URL of its source map file, embedded in a special comment on the last line of the file:

`/*# sourceMappingURL=<url> */`

For instance, given an SCSS file named **styles.scss**:

`$textSize: 26px;
$fontColor: red;
$bgColor: whitesmoke;
h2 {
    font-size: $textSize;
    color: $fontColor;
    background: $bgColor;
}`

Sass generates a CSS file, **styles.css**, with the sourceMappingURL annotation:

`h2 {
  font-size: 26px;
  color: red;
  background-color: whitesmoke;
}
/*# sourceMappingURL=styles.css.map */
`

Below is an example source map file:

`{
  "version": "3",
  "mappings":"AAKA,EAAG;EACC,SAAS,EANF,IAAI;EAOX,KAAK"
  "sources": ["sass/styles.scss"],
  "file": "styles.css"
}`

### CSS preprocessor support

DevTools supports the [Source Map Revision 3 proposal](https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#). This proposal is being implemented in several CSS preprocessors (Updated August 2014):

* **Sass**: As described above, this is supported in Sass 3.3.
* **Compass**: The `--sourcemap` flag was [implemented in Compass 1.0](http://compass-style.org/blog/2014/08/15/omg-compass-1-0/). Alternatively you can add `sourcemap: true` to your config.rb file. [Demo repo here](https://github.com/grayghostvisuals/sourcemaps). Development notes are in [issue 1108](https://github.com/Compass/compass/issues/1108#issuecomment-52432075).
* **Less**: Implemented in 1.5.0\. See [issue #1050](https://github.com/less/less.js/issues/1050#issuecomment-25566463) for details and usage patterns.
* **Autoprefixer**: Implemented in 1.0\. [Autoprefixer docs](https://github.com/ai/autoprefixer#source-map) explain how to use it, along with absorbing an input sourcemap (from another preprocessor).
* **Libsass**: [Implemented](https://github.com/hcatlin/libsass/commit/366bc110c39c26c9267a1cc06e578beb94cd93ef).
* **Stylus**: Implemented. See the latest in [issue #1655](https://github.com/LearnBoost/stylus/pull/1655#issuecomment-52826158).

### Resources

Many users have developed their own workflows using CSS preprocessors. See the following external articles for tutorials and alternate workflows.

* [Getting started with CSS sourcemaps and in-browser Sass editing](https://medium.com/what-i-learned-building/b4daab987fb0)
* [Faster Sass debugging and style iteration with source maps, Chrome Web Developer Tools and Grunt](http://benfrain.com/add-sass-compass-debug-info-for-chrome-web-developer-tools/)

**Note:** External resources may not reflect the latest version of Chrome.

{% include modules/nextarticle.liquid %}

{% endwrap %}
